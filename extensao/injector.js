console.log('Script de inje√ß√£o carregado');

function preencherChaveAcesso() {
  // Verificar se estamos na p√°gina de resultado ANTES de qualquer coisa
  const currentUrl = window.location.href;
  const isResultPage = currentUrl.includes('consultaResumo.aspx') || 
                      currentUrl.includes('consulta.aspx');
  
  if (isResultPage) {
    console.log('üéØ P√°gina de resultado detectada - INIBINDO preenchimento de chave');
    console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
    setTimeout(() => {
      monitorarPaginaResultado();
    }, 1000);
    return;
  }
  
chrome.runtime.sendMessage({ tipo: "GetChave" }, (response) => {
    const chave = response?.chave;
    if (chave && chave.length === 44) {
      setTimeout(() => {
      const input = document.querySelector("#ctl00_ContentPlaceHolder1_txtChaveAcessoResumo");
      if (input) {
        input.value = chave;
          input.dispatchEvent(new Event('input', { bubbles: true }));
          input.dispatchEvent(new Event('change', { bubbles: true }));
          input.focus();
          
          // Ocultar bot√µes desnecess√°rios ap√≥s preencher a chave
          if (window.hideUnnecessaryButtons) {
            window.hideUnnecessaryButtons();
          }
          
          // Verificar se √© uma a√ß√£o de baixar XML
          const urlParams = new URLSearchParams(window.location.search);
          const acao = urlParams.get('acao');
          
          if (acao === 'xml') {
            console.log('A√ß√£o detectada: Baixar XML');
            // Para XML, iniciar monitoramento do captcha com download autom√°tico
            iniciarMonitoramentoCaptchaComDownload();
          } else {
            console.log('A√ß√£o detectada: Visualizar nota');
            iniciarMonitoramentoCaptcha();
          }
        }
      }, 1000);
    }
  });
}

function iniciarMonitoramentoCaptcha() {
  // Verificar se estamos na p√°gina de resultado
  if (window.AGIL_FISCAL_RESULT_PAGE) {
    console.log('üö´ INIBINDO monitoramento de captcha - p√°gina de resultado detectada');
    return;
  }
  
  console.log('Iniciando monitoramento do captcha...');
  setTimeout(() => {
    if (window.CaptchaMonitor) {
      const monitor = new window.CaptchaMonitor();
      monitor.start();
      console.log('Monitor de captcha iniciado');
    } else {
      console.log('Monitor de captcha n√£o dispon√≠vel, usando m√©todo b√°sico');
      monitoramentoBasicoCaptcha();
    }
  }, 2000);
}

function monitoramentoBasicoCaptcha() {
  // Verificar se estamos na p√°gina de resultado
  if (window.AGIL_FISCAL_RESULT_PAGE) {
    console.log('üö´ INIBINDO monitoramento b√°sico de captcha - p√°gina de resultado detectada');
    return;
  }
  
  console.log('Iniciando monitoramento b√°sico do captcha...');
  
  let attempts = 0;
  const maxAttempts = 120; // 60 segundos
  
  const interval = setInterval(() => {
    attempts++;
    console.log(`Verifica√ß√£o b√°sica ${attempts}/${maxAttempts}`);
    
    // Verificar se o captcha foi resolvido
    const hCaptchaElement = document.querySelector('.h-captcha[data-hcaptcha-response]');
    const iframeCaptcha = document.querySelector('iframe[src*="hcaptcha"]');
    
    if (hCaptchaElement && hCaptchaElement.getAttribute('data-hcaptcha-response') && !iframeCaptcha) {
      console.log('Captcha resolvido detectado (m√©todo b√°sico)');
      clearInterval(interval);
      
      setTimeout(() => {
        const botaoContinuar = document.querySelector('#ctl00_ContentPlaceHolder1_btnConsultarHCaptcha');
        if (botaoContinuar) {
          try {
            botaoContinuar.click();
            console.log('Clique executado (m√©todo b√°sico)');
          } catch (e) {
            console.log('Erro no clique (m√©todo b√°sico):', e);
          }
        }
      }, 1000);
    } else if (attempts >= maxAttempts) {
      console.log('Tempo limite excedido (m√©todo b√°sico)');
      clearInterval(interval);
    }
  }, 500);
}

// Fun√ß√£o para monitorar captcha com download autom√°tico
function iniciarMonitoramentoCaptchaComDownload() {
  // Verificar se estamos na p√°gina de resultado
  if (window.AGIL_FISCAL_RESULT_PAGE) {
    console.log('üö´ INIBINDO monitoramento de captcha com download - p√°gina de resultado detectada');
    return;
  }
  
  console.log('Iniciando monitoramento do captcha com download autom√°tico...');
  setTimeout(() => {
    if (window.CaptchaMonitor) {
      const monitor = new window.CaptchaMonitor();
      monitor.start();
      console.log('Monitor de captcha iniciado com download autom√°tico');
      
      // Sobrescrever o m√©todo de captcha resolvido para incluir monitoramento de download
      const originalHandleCaptchaResolved = monitor.handleCaptchaResolved;
      monitor.handleCaptchaResolved = function() {
        console.log('Captcha resolvido - preparando para mudan√ßa de p√°gina...');
        // Salvar informa√ß√£o no sessionStorage antes da mudan√ßa de p√°gina
        sessionStorage.setItem('agil_fiscal_monitorar_download', 'true');
        if (originalHandleCaptchaResolved) {
          originalHandleCaptchaResolved.call(this);
        }
        // Iniciar monitoramento da p√°gina de resultado ap√≥s clicar no continuar
        setTimeout(() => {
          console.log('Iniciando monitoramento da p√°gina de resultado ap√≥s captcha resolvido...');
          monitorarPaginaResultado();
        }, 3000); // Aumentado para 3 segundos
      };
      
      // Tamb√©m sobrescrever o m√©todo clickContinueButton para garantir
      const originalClickContinueButton = monitor.clickContinueButton;
      monitor.clickContinueButton = function() {
        console.log('Clicando no bot√£o continuar e agendando monitoramento...');
        // Salvar informa√ß√£o no sessionStorage antes da mudan√ßa de p√°gina
        sessionStorage.setItem('agil_fiscal_monitorar_download', 'true');
        if (originalClickContinueButton) {
          originalClickContinueButton.call(this);
        }
        // Iniciar monitoramento da p√°gina de resultado ap√≥s clicar no continuar
        setTimeout(() => {
          console.log('Iniciando monitoramento da p√°gina de resultado ap√≥s clique no continuar...');
          monitorarPaginaResultado();
        }, 3000);
      };
    } else {
      console.log('Monitor de captcha n√£o dispon√≠vel, usando m√©todo b√°sico com download');
      monitoramentoBasicoCaptchaComDownload();
    }
  }, 2000);
}

// Fun√ß√£o para monitorar captcha b√°sico com download
function monitoramentoBasicoCaptchaComDownload() {
  // Verificar se estamos na p√°gina de resultado
  if (window.AGIL_FISCAL_RESULT_PAGE) {
    console.log('üö´ INIBINDO monitoramento b√°sico de captcha com download - p√°gina de resultado detectada');
    return;
  }
  
  console.log('Iniciando monitoramento b√°sico do captcha com download...');
  
  let attempts = 0;
  const maxAttempts = 120; // 60 segundos
  
  const interval = setInterval(() => {
    attempts++;
    console.log(`Verifica√ß√£o b√°sica com download ${attempts}/${maxAttempts}`);
    
    // Verificar se o captcha foi resolvido
    const hCaptchaElement = document.querySelector('.h-captcha[data-hcaptcha-response]');
    const iframeCaptcha = document.querySelector('iframe[src*="hcaptcha"]');
    
    if (hCaptchaElement && hCaptchaElement.getAttribute('data-hcaptcha-response') && !iframeCaptcha) {
      console.log('Captcha resolvido detectado (m√©todo b√°sico com download)');
      clearInterval(interval);
      
      setTimeout(() => {
        const botaoContinuar = document.querySelector('#ctl00_ContentPlaceHolder1_btnConsultarHCaptcha');
        if (botaoContinuar) {
          try {
            botaoContinuar.click();
            console.log('Clique executado (m√©todo b√°sico com download)');
            // Iniciar monitoramento da p√°gina de resultado
            setTimeout(() => {
              monitorarPaginaResultado();
            }, 2000);
          } catch (e) {
            console.log('Erro no clique (m√©todo b√°sico com download):', e);
          }
        }
      }, 1000);
    } else if (attempts >= maxAttempts) {
      console.log('Tempo limite excedido (m√©todo b√°sico com download)');
      clearInterval(interval);
    }
  }, 500);
}

// Fun√ß√£o para monitorar a p√°gina de resultado e clicar no bot√£o Download
function monitorarPaginaResultado() {
  console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
  console.log('URL atual:', window.location.href);
  
  let attempts = 0;
  const maxAttempts = 120; // 60 segundos (aumentado)
  
  const interval = setInterval(() => {
    attempts++;
    console.log(`üîç Verificando p√°gina de resultado ${attempts}/${maxAttempts}`);
    
    // Verificar se estamos na p√°gina de resultado (m√∫ltiplos indicadores)
    const currentUrl = window.location.href;
    console.log('URL atual:', currentUrl);
    
    // Para a p√°gina consultaResumo.aspx, sempre considerar como p√°gina de resultado
    const isResultPage = currentUrl.includes('consultaResumo.aspx') || 
                        currentUrl.includes('consulta.aspx') ||
                        document.querySelector('#ctl00_ContentPlaceHolder1_btnDownload') ||
                        document.querySelector('input[value="Download do documento"]') ||
                        document.querySelector('input[value*="Download"]') ||
                        document.querySelector('input[value*="download"]');
    
    console.log('√â p√°gina de resultado?', isResultPage);
    
    // Se estamos na p√°gina consultaResumo.aspx, for√ßar como p√°gina de resultado
    if (currentUrl.includes('consultaResumo.aspx')) {
      console.log('‚úÖ P√°gina consultaResumo.aspx detectada - for√ßando como p√°gina de resultado');
      console.log('üîç Verificando se a p√°gina est√° completamente carregada...');
      
      // Verificar se o DOM est√° pronto
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        console.log('‚úÖ DOM est√° pronto, continuando monitoramento...');
      } else {
        console.log('‚è≥ DOM ainda carregando, aguardando...');
        return; // Continuar no pr√≥ximo intervalo
      }
    }
    
    if (isResultPage) {
      console.log('‚úÖ P√°gina de resultado detectada, procurando bot√£o Download...');
      
      // M√∫ltiplos m√©todos para encontrar o bot√£o Download
      let botaoDownload = null;
      
      // M√©todo 1: XPath espec√≠fico
      try {
        const xpath = '//*[@id="ctl00_ContentPlaceHolder1_btnDownload"]';
        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
        botaoDownload = result.singleNodeValue;
        if (botaoDownload) console.log('‚úÖ Bot√£o Download encontrado via XPath');
      } catch (e) {
        console.log('‚ùå Erro no XPath:', e);
      }
      
      // M√©todo 2: ID direto
      if (!botaoDownload) {
        botaoDownload = document.querySelector('#ctl00_ContentPlaceHolder1_btnDownload');
        if (botaoDownload) console.log('‚úÖ Bot√£o Download encontrado via ID');
      }
      
      // M√©todo 3: Valor do bot√£o
      if (!botaoDownload) {
        botaoDownload = document.querySelector('input[value="Download do documento"]');
        if (botaoDownload) console.log('‚úÖ Bot√£o Download encontrado via valor');
      }
      
      // M√©todo 4: Texto do bot√£o
      if (!botaoDownload) {
        const buttons = document.querySelectorAll('input[type="submit"], button');
        console.log('Bot√µes encontrados:', buttons.length);
        for (let btn of buttons) {
          const buttonText = (btn.value || btn.textContent || '').toLowerCase();
          console.log('Bot√£o:', buttonText);
          if (buttonText.includes('download') || buttonText.includes('baixar') || buttonText.includes('xml')) {
            botaoDownload = btn;
            console.log('‚úÖ Bot√£o Download encontrado via texto:', buttonText);
            break;
          }
        }
      }
      
      // M√©todo 5: Busca por qualquer elemento com "Download" no texto
      if (!botaoDownload) {
        const allElements = document.querySelectorAll('*');
        for (let element of allElements) {
          if (element.textContent && element.textContent.toLowerCase().includes('download do documento')) {
            console.log('‚úÖ Elemento com "Download do documento" encontrado:', element);
            // Procurar o bot√£o mais pr√≥ximo
            const nearbyButton = element.closest('form')?.querySelector('input[type="submit"], button') ||
                               element.parentElement?.querySelector('input[type="submit"], button');
            if (nearbyButton) {
              botaoDownload = nearbyButton;
              console.log('‚úÖ Bot√£o Download encontrado pr√≥ximo ao texto');
              break;
            }
          }
        }
      }
      
      if (botaoDownload) {
        console.log('üéØ Bot√£o Download encontrado!', botaoDownload);
        clearInterval(interval);
        
        setTimeout(() => {
          try {
            // M√©todo 1: Clique direto
            console.log('üñ±Ô∏è Tentando clique direto...');
            botaoDownload.click();
            console.log('‚úÖ Clique no bot√£o Download executado com sucesso!');
          } catch (e) {
            console.log('‚ùå Erro ao clicar no bot√£o Download:', e);
            try {
              // M√©todo 2: Event dispatch
              console.log('üñ±Ô∏è Tentando evento de clique...');
              botaoDownload.dispatchEvent(new Event('click', { bubbles: true }));
              console.log('‚úÖ Clique alternativo no bot√£o Download executado!');
            } catch (e2) {
              console.log('‚ùå Erro no clique alternativo:', e2);
              try {
                // M√©todo 3: MouseEvent
                console.log('üñ±Ô∏è Tentando MouseEvent...');
                botaoDownload.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                console.log('‚úÖ Clique MouseEvent no bot√£o Download executado!');
              } catch (e3) {
                console.log('‚ùå Erro no clique MouseEvent:', e3);
              }
            }
          }
        }, 1000);
      } else {
        console.log('‚ùå Bot√£o Download ainda n√£o encontrado...');
        // Log adicional para debug
        if (attempts % 10 === 0) {
          console.log('üìä URL atual:', currentUrl);
          console.log('üìä Elementos encontrados:', document.querySelectorAll('input[type="submit"], button').length);
          console.log('üìä Todos os bot√µes:', Array.from(document.querySelectorAll('input[type="submit"], button')).map(b => b.value || b.textContent));
        }
      }
    } else if (attempts >= maxAttempts) {
      console.log('‚è∞ Tempo limite excedido para p√°gina de resultado');
      clearInterval(interval);
    }
  }, 500);
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', preencherChaveAcesso);
} else {
  preencherChaveAcesso();
}

// Fun√ß√£o removida - agora o download √© autom√°tico ap√≥s resolver o captcha

// Listener para mudan√ßas de URL
let lastUrl = location.href;
new MutationObserver(() => {
  const url = location.href;
  if (url !== lastUrl) {
    lastUrl = url;
    console.log('üåê URL mudou para:', url);
    
    // Se mudou para uma p√°gina de resultado, iniciar monitoramento
    if (!url.includes('consultaRecaptcha.aspx')) {
      console.log('üîÑ Mudan√ßa de URL detectada - iniciando monitoramento da p√°gina de resultado');
      setTimeout(() => {
        monitorarPaginaResultado();
      }, 1000);
    }
  }
}).observe(document, { subtree: true, childList: true });

// Listener adicional para mudan√ßas de URL usando popstate
window.addEventListener('popstate', () => {
  console.log('üîÑ Popstate detectado - URL mudou para:', window.location.href);
  if (!window.location.href.includes('consultaRecaptcha.aspx')) {
    console.log('üîÑ Popstate - iniciando monitoramento da p√°gina de resultado');
    setTimeout(() => {
      monitorarPaginaResultado();
    }, 1000);
  }
});

// Listener para mudan√ßas de URL usando pushstate/replacestate
const originalPushState = history.pushState;
const originalReplaceState = history.replaceState;

history.pushState = function(...args) {
  originalPushState.apply(this, args);
  console.log('üîÑ PushState detectado - URL mudou para:', window.location.href);
  if (!window.location.href.includes('consultaRecaptcha.aspx')) {
    console.log('üîÑ PushState - iniciando monitoramento da p√°gina de resultado');
    setTimeout(() => {
      monitorarPaginaResultado();
    }, 1000);
  }
};

history.replaceState = function(...args) {
  originalReplaceState.apply(this, args);
  console.log('üîÑ ReplaceState detectado - URL mudou para:', window.location.href);
  if (!window.location.href.includes('consultaRecaptcha.aspx')) {
    console.log('üîÑ ReplaceState - iniciando monitoramento da p√°gina de resultado');
    setTimeout(() => {
      monitorarPaginaResultado();
    }, 1000);
  }
};

// Listener para mudan√ßas de URL usando beforeunload
window.addEventListener('beforeunload', () => {
  console.log('üîÑ Beforeunload detectado - p√°gina vai mudar');
  // Salvar informa√ß√£o no sessionStorage para a pr√≥xima p√°gina
  sessionStorage.setItem('agil_fiscal_monitorar_download', 'true');
});

// Listener para mudan√ßas de URL usando unload
window.addEventListener('unload', () => {
  console.log('üîÑ Unload detectado - p√°gina mudando');
  // Salvar informa√ß√£o no sessionStorage para a pr√≥xima p√°gina
  sessionStorage.setItem('agil_fiscal_monitorar_download', 'true');
});

// Listener para quando a p√°gina carrega
window.addEventListener('load', () => {
  console.log('üîÑ P√°gina carregada - verificando se deve monitorar download');
  console.log('URL atual:', window.location.href);
  
  // Verificar se estamos na p√°gina de resultado
  const currentUrl = window.location.href;
  const isResultPage = currentUrl.includes('consultaResumo.aspx') || 
                      currentUrl.includes('consulta.aspx');
  
  console.log('√â p√°gina de resultado?', isResultPage);
  
  // Se estamos na p√°gina de resultado, N√ÉO iniciar monitoramento de captcha
  if (isResultPage) {
    window.AGIL_FISCAL_RESULT_PAGE = true;
    console.log('üéØ P√°gina de resultado detectada - INIBINDO monitoramento de captcha');
    console.log('üîÑ Monitoramento de download detectado - iniciando...');
    sessionStorage.removeItem('agil_fiscal_monitorar_download');
    setTimeout(() => {
      console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
      monitorarPaginaResultado();
    }, 2000);
    return; // IMPORTANTE: Sair aqui para n√£o executar o resto
  }
  
  // Se temos flag de download ou n√£o estamos na p√°gina de resultado
  if (sessionStorage.getItem('agil_fiscal_monitorar_download') === 'true') {
    console.log('üîÑ Monitoramento de download detectado - iniciando...');
    sessionStorage.removeItem('agil_fiscal_monitorar_download');
    setTimeout(() => {
      console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
      monitorarPaginaResultado();
    }, 2000);
  } else {
    console.log('üîÑ P√°gina inicial - iniciando preenchimento da chave');
    setTimeout(preencherChaveAcesso, 500);
  }
});

// Fun√ß√£o para verificar se estamos na p√°gina consultaResumo.aspx e iniciar monitoramento
function verificarPaginaResultado() {
  if (window.location.href.includes('consultaResumo.aspx')) {
    window.AGIL_FISCAL_RESULT_PAGE = true;
    console.log('üéØ P√°gina consultaResumo.aspx detectada - INIBINDO monitoramento de captcha');
    console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
    setTimeout(() => {
      console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
      monitorarPaginaResultado();
    }, 1000);
  }
}

// Vari√°vel global para controlar se estamos na p√°gina de resultado
window.AGIL_FISCAL_RESULT_PAGE = false;

// Verifica√ß√£o inicial para evitar monitoramento de captcha na p√°gina de resultado
const currentUrl = window.location.href;
const isResultPage = currentUrl.includes('consultaResumo.aspx') || 
                    currentUrl.includes('consulta.aspx');

if (isResultPage) {
  window.AGIL_FISCAL_RESULT_PAGE = true;
  console.log('üéØ P√ÅGINA DE RESULTADO DETECTADA - INIBINDO TODOS OS MONITORAMENTOS DE CAPTCHA');
  console.log('üöÄ Iniciando monitoramento da p√°gina de resultado imediatamente...');
  setTimeout(() => {
    monitorarPaginaResultado();
  }, 1000);
} else {
  console.log('üîÑ P√°gina inicial detectada - permitindo monitoramento de captcha');
}

// Verificar imediatamente se j√° estamos na p√°gina consultaResumo.aspx
verificarPaginaResultado();

// Listener espec√≠fico para detectar quando a p√°gina consultaResumo.aspx carrega
window.addEventListener('load', verificarPaginaResultado);
window.addEventListener('DOMContentLoaded', verificarPaginaResultado);

// Listener adicional para garantir que o monitoramento seja iniciado
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìÑ DOM carregado - verificando p√°gina de resultado');
  if (window.location.href.includes('consultaResumo.aspx')) {
    console.log('üéØ DOM carregado - p√°gina consultaResumo.aspx detectada');
    setTimeout(() => {
      console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
      monitorarPaginaResultado();
    }, 1500);
  }
});

// Listener para readystatechange
document.addEventListener('readystatechange', () => {
  console.log('üìÑ ReadyState mudou para:', document.readyState);
  if (document.readyState === 'complete' && window.location.href.includes('consultaResumo.aspx')) {
    console.log('üéØ ReadyState complete - p√°gina consultaResumo.aspx detectada');
    setTimeout(() => {
      console.log('üöÄ Iniciando monitoramento da p√°gina de resultado...');
      monitorarPaginaResultado();
    }, 1000);
    }
  });
  