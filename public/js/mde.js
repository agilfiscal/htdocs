/**
 * Consulta MDE - Manifesta√ß√£o do Destinat√°rio Eletr√¥nico
 * 
 * Este m√≥dulo realiza consultas ao servi√ßo MDE da SEFAZ para verificar
 * documentos eletr√¥nicos dispon√≠veis para manifesta√ß√£o.
 */

require('dotenv').config();
const fs = require('fs');
const { DistribuicaoDFe } = require('node-mde');

/**
 * Valida as vari√°veis de ambiente necess√°rias
 * @throws {Error} Se alguma vari√°vel obrigat√≥ria n√£o estiver definida
 */
function validarVariaveisAmbiente() {
  const variaveisObrigatorias = [
    'CERTIFICADO_PFX',
    'CERTIFICADO_SENHA',
    'CNPJ',
    'UF_AUTOR',
    'AMBIENTE'
  ];

  for (const variavel of variaveisObrigatorias) {
    if (!process.env[variavel]) {
      throw new Error(`${variavel} n√£o definido no arquivo .env`);
    }
  }
}

/**
 * Verifica se o certificado digital existe no caminho especificado
 * @throws {Error} Se o certificado n√£o for encontrado
 */
function verificarCertificado() {
  if (!fs.existsSync(process.env.CERTIFICADO_PFX)) {
    throw new Error(`Certificado n√£o encontrado em: ${process.env.CERTIFICADO_PFX}`);
  }
}

/**
 * Configura e retorna o cliente MDE
 * @returns {DistribuicaoDFe} Cliente MDE configurado
 */
function configurarClienteMDE() {
  return new DistribuicaoDFe({
    pfx: fs.readFileSync(process.env.CERTIFICADO_PFX),
    passphrase: process.env.CERTIFICADO_SENHA,
    cnpj: process.env.CNPJ,
    cUFAutor: process.env.UF_AUTOR,
    tpAmb: process.env.AMBIENTE
  });
}

/**
 * Fun√ß√£o principal que realiza a consulta MDE
 */
async function consultarMDE() {
  try {
    console.log('üöÄ Iniciando consulta MDE...');
    
    // Valida√ß√µes iniciais
    validarVariaveisAmbiente();
    verificarCertificado();

    // Exibe informa√ß√µes da consulta
    console.log('üìã Informa√ß√µes da Consulta:');
    console.log('   Ambiente:', process.env.AMBIENTE === '1' ? 'Produ√ß√£o' : 'Homologa√ß√£o');
    console.log('   UF:', process.env.UF_AUTOR);
    console.log('   CNPJ:', process.env.CNPJ);

    // Configura e executa a consulta
    const distribuicao = configurarClienteMDE();
    console.log('üîç Consultando √∫ltimo NSU...');
    
    // Primeiro, consulta o √∫ltimo NSU dispon√≠vel
    const ultimoNSU = await distribuicao.consultaUltNSU('000000000000000');
    
    if (ultimoNSU.error) {
      throw new Error(ultimoNSU.error);
    }

    // Extrai o √∫ltimo NSU da resposta
    const ultNSU = ultimoNSU.data?.ultNSU || '000000000000000';
    console.log('üìä √öltimo NSU dispon√≠vel:', ultNSU);

    // Agora consulta usando o √∫ltimo NSU
    const consulta = await distribuicao.consultaUltNSU(ultNSU);

    if (consulta.error) {
      throw new Error(consulta.error);
    }

    // Exibe o resultado
    console.log('‚úÖ Resultado da consulta:');
    console.log(JSON.stringify(consulta, null, 2));

    // Salva o resultado em um arquivo JSON para uso pelo PHP
    fs.writeFileSync(__dirname + '/../resultado_mde.json', JSON.stringify(consulta, null, 2));
    console.log('Arquivo resultado_mde.json gerado em ./public/');

    return consulta;

  } catch (error) {
    console.error('‚ùå Erro ao consultar MDE:', error.message);
    if (error.code === 'ENOENT') {
      console.error('   Verifique se o caminho do certificado est√° correto no arquivo .env');
    }
    throw error;
  }
}

// Exporta a fun√ß√£o consultarMDE
module.exports = { consultarMDE };